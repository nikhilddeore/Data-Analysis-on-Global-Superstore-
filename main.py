# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i6DQgTmd1AhTmhKer1rVgM164fLUpYDi
"""

import pandas as pd

data = pd.read_excel('/content/Global Superstore.xlsx')

print(data.head())

"""1. Descriptive Statistics"""

# Display summary statistics for numerical columns
print(data.describe())

# Display summary statistics for categorical columns
print(data.describe(include=['object']))

"""2. Data Cleaning"""

# Check for missing values
print(data.isnull().sum())

# Drop the Postal Code column
data = data.drop(columns=['Postal Code'])

# Check for duplicates
print(data.duplicated().sum())

# Remove duplicates if any
data = data.drop_duplicates()

# Check data types
print(data.dtypes)

# Convert date columns to datetime format
data['Order Date'] = pd.to_datetime(data['Order Date'])
data['Ship Date'] = pd.to_datetime(data['Ship Date'])

"""3. Exploratory Data Analysis (EDA)

Sales Over Time
"""

import matplotlib.pyplot as plt

# Reset the index to ensure 'Order Date' is available as a column
data = data.reset_index()

# Sales over time
data.set_index('Order Date', inplace=True)
monthly_sales = data['Sales'].resample('M').sum()
monthly_sales.plot()
plt.title('Monthly Sales Over Time')
plt.ylabel('Sales')
plt.xlabel('Month')
plt.show()

"""Top-Selling Products"""

# Top-selling products
top_products = data.groupby('Product Name')['Sales'].sum().sort_values(ascending=False).head(10)
top_products.plot(kind='bar')
plt.title('Top 10 Selling Products')
plt.ylabel('Sales')
plt.xlabel('Product Name')
plt.xticks(rotation=90)
plt.show()

"""Profit by Category"""

# Profit by category
profit_by_category = data.groupby('Category')['Profit'].sum()
profit_by_category.plot(kind='bar')
plt.title('Profit by Category')
plt.ylabel('Profit')
plt.xlabel('Category')
plt.show()

"""4. Data Transformation

Creating New Feature: Shipping Duration
"""

# Display the column names
print(data.columns)

# Check if 'Order Date' and 'Ship Date' are present
print('Order Date' in data.columns)
print('Ship Date' in data.columns)

# Calculate shipping duration using Ship Date
data['Shipping Duration'] = (data['Ship Date'] - data['Ship Date'].dt.to_period('D').dt.to_timestamp()).dt.days

"""Normalizing Sales"""

from sklearn.preprocessing import MinMaxScaler

# Normalizing Sales
scaler = MinMaxScaler()
data['Normalized Sales'] = scaler.fit_transform(data[['Sales']])

"""5. Business Insights

Customer Segmentation
"""

# Customer segmentation based on total sales
customer_segment = data.groupby('Customer Name')['Sales'].sum().sort_values(ascending=False)
print(customer_segment.head(10))

"""Sales Trends"""

# Monthly sales trend
monthly_sales = data['Sales'].resample('M').sum()
monthly_sales.plot()
plt.title('Monthly Sales Trend')
plt.ylabel('Sales')
plt.xlabel('Month')
plt.show()

"""Top-Selling Products"""

# Top-selling products
top_products = data.groupby('Product Name')['Sales'].sum().sort_values(ascending=False).head(10)
print(top_products)

""" top 10 cities by revenue"""

import matplotlib.pyplot as plt

# Group the data by 'City' and sum up the 'Sales' column
city_revenue = data.groupby('City')['Sales'].sum()

# Sort the cities by revenue in descending order and select the top 10
top_10_cities = city_revenue.sort_values(ascending=False).head(10)

# Plotting the bar chart
plt.figure(figsize=(8, 5))
top_10_cities.plot(kind='bar', color='skyblue')
plt.title('Top 10 Cities by Revenue')
plt.xlabel('City')
plt.ylabel('Total Revenue ($)')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Revenue Distribution by Region"""

# Group the data by 'Region' and sum up the 'Sales' column
region_revenue = data.groupby('Region')['Sales'].sum()

# Plotting the pie chart
plt.figure(figsize=(8, 8))
region_revenue.plot(kind='pie', autopct='%1.1f%%', colors=['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue'], startangle=140)
plt.title('Revenue Distribution by Region')
plt.ylabel('')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""Profit by Market"""

# Group the data by 'Market' and sum up the 'Profit' column
market_profit = data.groupby('Market')['Profit'].sum()

# Plotting the line graph
plt.figure(figsize=(8, 5))
market_profit.sort_values(ascending=False).plot(kind='line', marker='o', color='green')
plt.title('Profit by Market')
plt.xlabel('Market')
plt.ylabel('Total Profit ($)')
plt.xticks(rotation=45, ha='right')
plt.grid(True)
plt.tight_layout()
plt.show()

"""Revenue Distribution by Segment"""

# Group the data by 'Segment' and sum up the 'Sales' column
segment_revenue = data.groupby('Segment')['Sales'].sum()

# Plotting the pie chart
plt.figure(figsize=(8, 5))
segment_revenue.plot(kind='pie', autopct='%1.1f%%', colors=['lightblue', 'lightgreen', 'lightcoral'], startangle=140)
plt.title('Revenue Distribution by Segment')
plt.ylabel('')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""Does the price change according to order priority?"""

import pandas as pd


# Filter orders for the same product but with different priorities
same_product_diff_priority = data[data.duplicated(subset=['Product ID'], keep=False)]

# Initialize a list to store the comparison results
price_change_results = []

# Check if the price changes for the same item according to the order priority
for product_id, group in same_product_diff_priority.groupby('Product ID'):
    prices = group['Sales'].unique()
    if len(prices) > 1:
        price_change_results.append((product_id, 'Price changes based on order priority'))
    else:
        price_change_results.append((product_id, 'Price remains the same regardless of order priority'))

# Convert the list of results to a DataFrame for easier viewing
price_change_df = pd.DataFrame(price_change_results, columns=['Product_ID', 'Price_Comparison_Result'])

# Print the results
print("Comparison Results:")
print(price_change_df)

"""Percentage of price change according to order priority."""

# Filter orders for the same product but with different priorities
same_product_diff_priority = data[data.duplicated(subset=['Product ID'], keep=False)].copy()

# Calculate percentage change in price for each order
same_product_diff_priority['Price_Percentage_Change'] = same_product_diff_priority.groupby('Product ID')['Sales'].pct_change() * 100

# Calculate the average percentage change for each priority level
avg_percentage_change = same_product_diff_priority.groupby('Order Priority')['Price_Percentage_Change'].mean()

print("Average Percentage Change for Each Priority:")
print(avg_percentage_change)

"""The result shows the average percentage change in price for each priority level:

For orders with a priority of "Critical," the average percentage change in price is approximately -43.35%.
For orders with a priority of "High," the average percentage change in price is approximately -18.54%.
For orders with a priority of "Low," the average percentage change in price is approximately -15.77%.
For orders with a priority of "Medium," the average percentage change in price is approximately 12.73%.

THANK YOU!
"""